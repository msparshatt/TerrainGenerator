#include "noiseSimplex.cginc"
// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel GenerateTerrain

uint Resolution;

//hill noise parameters
float HillPerlinScale;
float HillPerlinXOffset;
float HillPerlinYOffset;
uint HillIterations;
float HillIterationFactor;
float HillIterationRotation;
float HillAmplitude;
float HillVoronoiScale;
float HillVoronoiXOffset;
float HillVoronoiYOffset;
int HillVoronoiType;
float HillFactor;

//mountain parameters
int MountainType;
float MountainScale;
float MountainXOffset;
float MountainYOffset;
uint MountainIterations;
float MountainIterationFactor;
float MountainIterationRotation;
float MountainAmplitude;
int MountainVoronoiType;

//plateau parameters
float PlateauHeight;
float PlateauScale;
float PlateauXOffset;
float PlateauYOffset;
int PlateauVoronoiType;

//settings
float MinHeight;
float MaxHeight;
bool InvertHeight;
float HeightScale;
bool ClampEdges;
float ClampHeight;

//terrace parameters
float2 TerraceParameters[3];

//ouput buffer
RWBuffer<float> Heights;

//calculate a 2D random number, used for producing voronoi noise
float2 Rand2D(float xPos, float yPos)
{
    float2 smallValue = float2(sin(xPos), sin(yPos));

    float2 dotDir = float2(12.989f, 78.233f);
    float random = dot(smallValue, dotDir);

    float x = sin(random) * 143758.5453f;
    x -= floor(x);

    dotDir = float2(39.346f, 11.135f);
    random = dot(smallValue, dotDir);

    float y = sin(random) * 143758.5453f;
    y -= floor(y);

    return float2(x, y);
}

float2 RotateVector(float2 oldVector, float degrees)
{
    float rads = radians(degrees);
    float newX = oldVector.x * cos(rads) - oldVector.y * sin(rads);
    float newY = oldVector.x * sin(rads) + oldVector.y * cos(rads);
    return float2(newX, newY);
}

float VoronoiNoise(float xPos, float yPos, float cellSize, int type)
{
    float xcoord = abs(xPos);
    float ycoord = abs(yPos);

    float xPosition = xcoord / cellSize;
    float yPosition = ycoord / cellSize;

    uint xBase = floor(xPosition);
    uint yBase = floor(yPosition);

    float minDistance = 100;
    float minDistance2 = 110;
    float minDistance3 = 120;

    for(int x=-1; x<=1; x++) {
        for(int y=-1; y<=1; y++) {
            int cellX = xBase + x;
            int cellY = yBase + y;

            //don't try to read outside the bounds of the array
            if(cellX < 0) {
                continue;
            }
            if(cellY < 0) {
                continue;
            }

            float2 voronoiPos = float2(cellX, cellY) + Rand2D(cellX, cellY);
            float distToCell = sqrt((xPosition - voronoiPos.x) * (xPosition - voronoiPos.x) + (yPosition - voronoiPos.y) * (yPosition - voronoiPos.y));
            //Vector2.Distance(voronoiCells[cell.x, cell.y], pos);

            if(distToCell < minDistance){
                minDistance3 = minDistance2;
                minDistance2 = minDistance;
                minDistance = distToCell;
            } else if(distToCell < minDistance2) {
                minDistance3 = minDistance2;
                minDistance2 = distToCell;
            } else if(distToCell < minDistance3) {
                minDistance3 = distToCell;
            }
        }
    }

    float result = 0;

    if(type == 0) {          //F1
        result = minDistance;
    } else if(type == 1) {   //F2
        result = minDistance2;
    } else if(type == 2) {   //F2 - F1
        result = minDistance2 - minDistance;
    } else if(type == 3) {   //F3
        result = minDistance3;
    } else if(type == 4) {   //F3 - F1
        result = minDistance3 - minDistance;
    } else if(type == 5) {   //F3 - F2
        result = minDistance3 - minDistance2;
    }

    return result;
}

float InverseVoronoiNoise(float xpos, float ypos, float cellSize, int type)
{
    return 1 - VoronoiNoise(xpos, ypos, cellSize, type);
}

//sigmoid value used for terracing
float Sigmoid(float k, float t)
{
    return (k * t) / (1 + k - t);
}

float SmoothStep(float start, float end, float value)
{
    float lambda = max(0, (value - start) / (end - start));
    lambda = min(1, lambda);

    return (3 * lambda * lambda - 2 * pow(lambda, 3));
}

float PerlinNoise(float x, float y, float scale, float startAmplitude, uint iterations, float rotation, float factor)
{
    float perlin = 0;
    float totalAmplitude = 0;
    float amplitude = startAmplitude;

    float2 position = float2(x, y);
    //calculate sum of a series of perlin noise functions
    for(uint i = 0; i < iterations; i++) {
        position = RotateVector(position, rotation);

        float value = snoise(float2(position.x * scale + 0.1, position.y * scale + 0.1));
        value = (value + 1) / 2;
        perlin += value * amplitude;

        scale *= 2;
        totalAmplitude += amplitude;
        amplitude *= factor;
    }

    perlin /= totalAmplitude;

    return perlin * startAmplitude;
}

float RidgedMultiFractal(float x, float y, float scale, float startAmplitude, uint iterations, float rotation, float factor)
{
    float rmf = 0;
    float totalAmplitude = 0;
    float amplitude = startAmplitude;

    float2 position = float2(x, y);
    //calculate sum of a series of perlin noise functions
    for(uint i = 0; i < iterations; i++) {
        position = RotateVector(position, rotation);

        float value = snoise(float2(position.x * scale + 0.1, position.y * scale + 0.1));
        value = 1 - abs(value);
        rmf += value * value * amplitude;

        scale *= 2;
        totalAmplitude += amplitude;
        amplitude *= factor;
    }

    rmf /= totalAmplitude;

    return rmf * startAmplitude;
}

float SquareTiles(float x, float y, float resolution, int cycles, float low, float high)
{
    float xHeight = x * cycles / resolution;
    xHeight = SmoothStep(0.4, 0.5, (xHeight - ceil(xHeight) + 1));

    float yHeight = y * cycles / resolution;
    yHeight = SmoothStep(04., 0.5, round(yHeight - ceil(xHeight) + 1));

    float height = abs(xHeight - yHeight);  //xHeight xor yHeight

    //return high if height = 1, low if height = 0
    return height * (high - low) + low;
}

float Terraces(int index, float height)
{
    float newHeight = height;

    if(TerraceParameters[index].x != -1) {
        float terraceHeight = height * TerraceParameters[index].x;

        uint heightFloor = floor(terraceHeight);
        float difference = terraceHeight - heightFloor;

        float shape = TerraceParameters[index].y;

        float newDifference = Sigmoid(shape, difference);

        float minHeight = (float)(heightFloor) / TerraceParameters[index].x;
        float maxHeight = (float)(heightFloor + 1) / TerraceParameters[index].x;

        newHeight = lerp(minHeight, maxHeight, newDifference);
    }

    return newHeight;
}

[numthreads(64,1,1)]
void GenerateTerrain (uint3 id : SV_DispatchThreadID)
{
    //calcuate the location in the heightmap
    uint x = id.x % Resolution;
    uint y = id.x / Resolution;

    float scale1 = 1 / (500.0 * HillPerlinScale);
    float scale2 = 1 / (500.0 * MountainScale);

    float perlin = PerlinNoise(x + HillPerlinXOffset, y + HillPerlinYOffset, scale1, 1.0, HillIterations, HillIterationRotation, HillIterationFactor);
    float voronoi = VoronoiNoise(x + HillVoronoiXOffset, y + HillVoronoiYOffset, HillVoronoiScale, HillVoronoiType);
    float hills = (perlin * HillFactor + voronoi * (1 - HillFactor)) * HillAmplitude;

    float mountains = 0;
    float mountainCutOff = .4;
    if(MountainType == 1)
        mountains = SmoothStep(mountainCutOff, 1, PerlinNoise(x + MountainXOffset, y + MountainYOffset,  scale2, MountainAmplitude, MountainIterations, MountainIterationRotation, MountainIterationFactor));
    else if (MountainType == 2)
        mountains = SmoothStep(mountainCutOff, 1, RidgedMultiFractal(x + MountainXOffset, y + MountainYOffset, scale2, MountainAmplitude, MountainIterations, MountainIterationRotation, MountainIterationFactor));
    else if(MountainType == 3)
        mountains = SmoothStep(mountainCutOff, 1, VoronoiNoise(x + MountainXOffset , y + MountainYOffset, MountainScale * 500, MountainVoronoiType)) * MountainAmplitude;
    else if(MountainType == 4)
        mountains = SmoothStep(mountainCutOff, 1, InverseVoronoiNoise(x + MountainXOffset, y + MountainYOffset, MountainScale * 500, MountainVoronoiType)) * MountainAmplitude;


    float height =  mountains + hills;

    //plateaus
    float plateauHeight = PerlinNoise(x, y,  0.0001, PlateauHeight, 1, 0, 1) * 10; 
    float plateauFloor = floor(plateauHeight);
    float difference = Sigmoid(0.1, plateauHeight - plateauFloor);

    difference = max(0, difference - 0.75) * 4;
    plateauHeight = lerp(plateauFloor, plateauFloor + 1, difference) / 10;

    if(height > plateauHeight) {
        float voronoi = VoronoiNoise(x + PlateauXOffset, y + PlateauYOffset, PlateauScale * 500, PlateauVoronoiType) * 0.7;
        if(voronoi > 0.5)
            height = plateauHeight;
        else 
            height = lerp(height, plateauHeight, voronoi * 2);
    }
    
    //if Clamp Edges is true then ensure the height tends to the midpoint at the edges of the heightmap
    float edgeClamp = 0;
    float center = Resolution / 2;
    if(ClampEdges) {

        float xDistance = x - center;
        float yDistance = y - center;
        float distance = xDistance * xDistance + yDistance * yDistance;

        edgeClamp = distance / (center * center);

        if(edgeClamp > 1) {
            edgeClamp = 1.0;
        }

        height = lerp(height, ClampHeight, edgeClamp);                    
    }


    //apply the scale value
    height = (height - 0.5f) * HeightScale + 0.5f;

    if(InvertHeight)
        height = 1 - height;

    //ensure the height is above the minimum value
    if(height < MinHeight + 0.05) {
        if(height < MinHeight - 0.05) {
            height = MinHeight;                        
        } else {
            height = lerp(MinHeight, MinHeight + 0.05f, (height + 0.05f - MinHeight) * 10);
        }
    }

    if(height > MaxHeight - 0.05) {
        if(height > MaxHeight + 0.05) {
            height = MaxHeight;                        
        } else {
            height = lerp(MaxHeight - 0.05, MaxHeight, (height + 0.05f - MaxHeight) * 10);
        }
    }


    //add any terraces
    for(uint terraceIndex = 0; terraceIndex < 3; terraceIndex++) {
        height = Terraces(terraceIndex, height);
    }

    //write the value to the buffer
    Heights[id.x] = height;
}
