// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Erode

int Resolution;
float Factor; //amount to multiply displacement by
int IterationCount; //number of iterations

float Talus = 0.016; //maximum inclination

//input/ouput buffer
RWBuffer<float> Heights;

[numthreads(64,1,1)]
void Erode (uint3 id : SV_DispatchThreadID) 
{
    int index = id.x;

    float height = Heights[index];

    for(int iteration = 0; iteration < IterationCount; iteration++) {
        float totalDelta = 0;
        float maxDelta = 0;
        float delta = 0;
        int lowestIndex = 0;
        uint2 offsets[] = {uint2(-1, 0), uint2(1, 0), uint2(0, 1), uint2(0, -1)};
        for(int k = 0; k < 4; k++) {
            if((index - Resolution >= 0) && (index + Resolution < Resolution * Resolution)) {
                delta = height - Heights[index - 1];
                if(delta > maxDelta) {
                    maxDelta = delta;
                    lowestIndex = 0;
                }
                delta = height - Heights[index + 1];
                if(delta > maxDelta) {
                    maxDelta = delta;
                    lowestIndex = 1;
                }
                delta = height - Heights[index + Resolution];
                if(delta > maxDelta) {
                    maxDelta = delta;
                    lowestIndex = 2;
                }
                delta = height - Heights[index - Resolution];
                if(delta > maxDelta) {
                    maxDelta = delta;
                    lowestIndex = 3;
                }
            }
        }

        if(maxDelta > 0) { // && maxDelta <= Talus) {
            height -=  maxDelta * Factor;
            Heights[index + offsets[lowestIndex].x + offsets[lowestIndex].y * Resolution] += maxDelta * Factor;
        }
    }

    Heights[index] = height;
}
