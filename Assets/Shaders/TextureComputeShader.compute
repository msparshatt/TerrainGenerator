// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ApplyTextures

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
RWTexture2D<float4> aoResult;
Texture2D<float4> heightMap;
Texture2DArray<float4> textures;
Texture2DArray<float4> aotextures;
int textureCount;
float factors[10];
int mixTypes[10];
float tiling;
int width;
int height;
int heightMapResolution;

[numthreads(8,8,1)]
void ApplyTextures(uint3 id : SV_DispatchThreadID)
{
    int3 pos = int3((id.x * tiling) % width, (id.y * tiling) % height, 0);
    float4 pixelTexture = float4(textures[pos].x, textures[pos].y, textures[pos].z, 1.0);
    float4 pixelAO = float4(aotextures[pos].x, aotextures[pos].y, aotextures[pos].z, 1.0);
    float f = 0;

    if(textureCount > 1) {
        int2 hmPos = int2((id.x * heightMapResolution) / width, (id.y * heightMapResolution) / height);

        for(int index = 1; index < textureCount; index ++) {
            float height = heightMap[hmPos];


            if(mixTypes[index] == 1) {
                f = (height * 2 - factors[index]) * 5;
            } else {
                float minHeight = 10;
                float maxHeight = 0;

                for(int i = -1; i <= 1; i++) {
                    for(int j = -1; j <= 1; j++) {

                        int2 newPos = int2(hmPos.x + i, hmPos.y + j);

                        height = heightMap[newPos];

                        minHeight = min(minHeight, height);
                        maxHeight = max(maxHeight, height);
                    }
                }

                f = ((maxHeight - minHeight) * 100 - factors[index]) * 6;
            }

            f = min(f, 1);
            f = max(f, 0);

            pos[2] = index;
            pixelTexture = pixelTexture * (1 - f) + float4(textures[pos].x, textures[pos].y, textures[pos].z, 1.0) * f;
            pixelAO = pixelAO * (1 - f) + float4(aotextures[pos].x, aotextures[pos].y, aotextures[pos].z, 1.0) * f;        
        }
    }

    Result[id.xy] = pixelTexture;
    aoResult[id.xy] = pixelAO;
}