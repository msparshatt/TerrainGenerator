#include "noiseSimplex.cginc"
// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ApplyTextures
#pragma kernel ApplyMask

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
RWTexture2D<float4> aoResult;
RWTexture2D<float4> paintMask;

Texture2DArray<float4> textures;
Texture2DArray<float4> aotextures;
Texture2D<float4> overlayTexture;
StructuredBuffer<float> heightmap;
float4 colors[10];
int textureCount;
float factors[10];
int mixTypes[10];
float offsets[10];
float tiling;
int width;
int height;
int heightMapResolution;

int paintMaskType;
float paintMaskFactor;

#define FUDGEFACTOR  0.05f  //
#define DIVISOR 0.1f

//Material mix types
#define MIXTYPE_TOP 1
#define MIXTYPE_STEEP 2
#define MIXTYPE_BOTTOM 3
#define MIXTYPE_SHALLOW 4
#define MIXTYPE_RANDOM 5
#define MIXTYPE_PAINTED 101
#define MIXTYPE_UNPAINTED 102

float CalculateFactor(int index, int mixType, float mixFactor, uint3 id, int2 heightmapPosition, float height)
{
    int heightmapIndex = heightmapPosition.x + heightmapPosition.y * heightMapResolution;
    float minValue = 1 - mixFactor - FUDGEFACTOR;

    float value = 0.0f;

    if(mixType == MIXTYPE_TOP) {                  //by height (top)
        value = height;
    } else if (mixType == MIXTYPE_BOTTOM) {          //by height (bottom)
        value = 1 - height;
    } else if (mixType == MIXTYPE_STEEP || mixType == MIXTYPE_SHALLOW) {          //by slope (steep/shallow)
        float minHeight = 10;
        float maxHeight = 0;

        for(int i = -1; i <= 1; i++) {
            for(int j = -1; j <= 1; j++) {

                int newIndex = heightmapIndex + i + j * heightMapResolution;
                height = heightmap[newIndex];

                minHeight = min(minHeight, height);
                maxHeight = max(maxHeight, height);
            }
        }

        value = ((maxHeight - minHeight) * 50);  //turn height difference into value between 0 & 1

        if(mixType == MIXTYPE_SHALLOW)
            value = 1 - value;
    }  else if(mixType == MIXTYPE_RANDOM) {           //random
        value = snoise(float2((id.x + offsets[index]) * 0.005f, (id.y + offsets[index]) * 0.005f));
        value = (value + 1) / 2;
    } else if(mixType == MIXTYPE_PAINTED) {
        value = overlayTexture[id.xy].a;
    } else if(mixType == MIXTYPE_UNPAINTED) {
        value = 1 - overlayTexture[id.xy].a;
    }

    float factor = (value - minValue) / DIVISOR;

    factor = min(factor, 1);
    factor = max(factor, 0);

    return factor;
}

void CaculatePixel(uint3 id: SV_DispatchThreadID)
{
    int3 pos = int3((id.x * tiling) % width, (id.y * tiling) % height, 0);
    float4 color;

    if(colors[0].x > -1) {
        color = colors[0];
    } else {
        color = textures[pos];
    }

    float4 pixelTexture = float4(color.x, color.y, color.z, 1.0);
    float4 pixelAO = float4(aotextures[pos].x, aotextures[pos].y, aotextures[pos].z, 1.0);
    float factor = 0;

    int2 hmPos = int2((id.x * heightMapResolution) / width, (id.y * heightMapResolution) / height); //convert from texture coords to heightmap coords
    int hmIndex = hmPos.x + hmPos.y * heightMapResolution;
    float height = heightmap[hmIndex];

    for(int index = 1; index < textureCount; index ++) {
        factor = CalculateFactor(index, mixTypes[index], factors[index], id, hmPos, height);

        pos[2] = index;

        if(colors[index].x > -1) {
            color = colors[index];
        } else {
            color = textures[pos];
        }

        pixelTexture = pixelTexture * (1 - factor) + float4(color.x, color.y, color.z, 1.0) * factor;
        pixelAO = pixelAO * (1 - factor) + float4(aotextures[pos].x, aotextures[pos].y, aotextures[pos].z, 1.0) * factor;        
    }

    Result[id.xy] = pixelTexture;
    aoResult[id.xy] = pixelAO;
}

void CalculatePaintMask(uint3 id)
{
    int3 pos = int3((id.x * tiling) % width, (id.y * tiling) % height, 0);
    float4 color;

    float factor = 0;

    int2 hmPos = int2((id.x * heightMapResolution) / width, (id.y * heightMapResolution) / height); //convert from texture coords to heightmap coords
    int hmIndex = hmPos.x + hmPos.y * heightMapResolution;
    float height = heightmap[hmIndex];

    factor = CalculateFactor(0, paintMaskType, paintMaskFactor, id, hmPos, height);

    float4 pixelTexture = float4(factor, factor, factor, 1.0);

    paintMask[id.xy] = pixelTexture;
}

[numthreads(8,8,1)]
void ApplyTextures(uint3 id : SV_DispatchThreadID)
{
    CaculatePixel(id);
    CalculatePaintMask(id);
}

[numthreads(8,8,1)]
void ApplyMask(uint3 id : SV_DispatchThreadID)
{
    CalculatePaintMask(id);
}